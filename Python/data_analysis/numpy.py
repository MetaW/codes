'''

'''
import numpy as np
import pandas as pd
import matplotlib as plt

#######################################################
# 获取数据
#######################################################
##### create ndarray:

a = np.array([1,2,3,4])
b = np.array([[1,2,3],
			  [4,5,6],
			  [7,8,9]])



c = np.zeros(5) # array([ 0.,  0.,  0.,  0.,  0.])
d = np.zeros((2,2,3)) 
'''
array([[[ 0.,  0.,  0.],
        [ 0.,  0.,  0.]],

       [[ 0.,  0.,  0.],
        [ 0.,  0.,  0.]]])
'''


c2 = np.ones(5)	# array([ 1.,  1.,  1.,  1.,  1.])
d2 = np.ones((2,3,4))
'''
array([[[ 1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.]],

       [[ 1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.],
        [ 1.,  1.,  1.,  1.]]])
'''


e = np.arange(8)	#array([0, 1, 2, 3, 4, 5, 6, 7])

f = np.identity(3)
'''
array([[ 1.,  0.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  0.,  1.]])
'''



#######################################################
# 查看数据宏观信息
#######################################################
dim = b.ndim 		#维度:2
size = b.shape 		#规模(3,3)
tp = b.dtype 		#数据类型





#######################################################
# 数据类型转换
#######################################################
a3 = b.astype(np.int64)
b3 = b.astype(np.float64)
c3 = b.astype(np.string_)



 

#######################################################
# 基本运算
#######################################################
b = np.array([[1,2,3],
			  [4,5,6],
			  [7,8,9]])

# 矩阵运算
b1 = b * b 		#不是点乘,是对应元素相乘
b2 = b + b
b3 = b - b

b4 = b * 3 		#每个元素乘3
b5 = b ** 3		#每个元素求3次幂

b6 = np.dot(b, b)	#点乘





#######################################################
# 数据提取
#######################################################
a = np.ones((2,3,2))	# a为3维数组
'''
array([[[ 1.,  1.],
        [ 1.,  1.],
        [ 1.,  1.]],

       [[ 1.,  1.],
        [ 1.,  1.],
        [ 1.,  1.]]])
'''

######### 
# 通过索引
#########
# a[index, index, index]
b1 = a[1,2,1]
b2 = a[0,2]
b3 = a[1]



######### 
# 通过切片
#########
# a[range, range, range]
# range是 start:end 左闭右开:[start, end), start缺省即从头开始，end缺省即到结尾
b11 = a[0:1, 1:2, 0:0]
b22 = a[0:1, :2, :1]
b33 = a[1:, 2:, 0:]
b44 = a[1:2, 0:]
b55 = a[:1]

# !!!!!!索引与切片获得的view是引用，不是拷贝，修改view中的值，原array也会被修改
# 获得拷贝而不是引用的方法：
b66 = a[0,1].copy()

#由于是引用，可以这样给原array复制
a.[0:1, :] = 10




##################### 
# bool array 和 bool索引
#####################
# 获得bool array
mask6 = b > 3		
mask7 = b == 2
mask8 = b != b1
mask9 = mask6 & mask7
mask10= mask6 | mask7

# 将bool array作为index
# bool array的维度不能高于被索引的array，而且对应维的大小也要一致
temp = np.array([[1,2,3],
				 [4,5,6],
				 [7,8,9]])

mask = (temp > 6) | (temp < 2)
'''
mask = array([[True, False, False],
       		  [False, False, False],
       		  [True, True, True]], dtype=bool)
'''
data = np.ones((3,3,5))
b1 = data[mask]		#bool array : mask 作为索引
# data中所有经mask过滤留下的子array拍成一列返回

#!!!!!!bool索引返回的直接就说copy，而不是引用
# 但是如果不保存view，也可以直接赋值
data[mask] = 10




##############
#通过fancy index
##############
# TODO






#######################################################
#转置
#######################################################
#转置
a = np.arange(16).reshape(4,4)
'''
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])
'''
a.T
'''
array([[ 0,  4,  8, 12],
       [ 1,  5,  9, 13],
       [ 2,  6, 10, 14],
       [ 3,  7, 11, 15]])
'''

#点乘
b = np.dot(a.T, a)
'''
array([[224, 248, 272, 296],
       [248, 276, 304, 332],
       [272, 304, 336, 368],
       [296, 332, 368, 404]])
'''






#######################################################
#对所有元素进行处理的函数
#######################################################
a = np.arange(16).reshape(4,4)
'''
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])
'''

b = np.sqrt(a)
'''
array([[ 0.        ,  1.        ,  1.41421356,  1.73205081],
       [ 2.        ,  2.23606798,  2.44948974,  2.64575131],
       [ 2.82842712,  3.        ,  3.16227766,  3.31662479],
       [ 3.46410162,  3.60555128,  3.74165739,  3.87298335]])
'''
b = np.exp(a)


x = np.random.randn(3,3)
y = np.random.randn(3,3)
z = np.maximum(x,y)

#######################################################
#######################################################
#######################################################
#######################################################
#######################################################
#######################################################
#######################################################
#######################################################
#######################################################
#######################################################
